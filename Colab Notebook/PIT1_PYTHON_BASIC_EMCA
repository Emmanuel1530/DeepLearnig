{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"PIT1_PYTHON_BASIC_EMCA","provenance":[],"collapsed_sections":[],"toc_visible":true,"authorship_tag":"ABX9TyNatmLDaa25WWpK/nW1z79P"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"xm8mzB2az2Pi"},"source":["Metodo Clasico"]},{"cell_type":"markdown","metadata":{"id":"ChK3Lq3m1t3c"},"source":["#Ejercicio 1"]},{"cell_type":"markdown","metadata":{"id":"PfNro9C090nZ"},"source":["Programa que me dice el mayor de 3 numeros"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"H8lRtx2Yxzwt","executionInfo":{"status":"ok","timestamp":1612740252392,"user_tz":300,"elapsed":6582,"user":{"displayName":"Emmanuel Mosquera Casas","photoUrl":"","userId":"16600618469783398935"}},"outputId":"f6585503-1b08-4afe-b8c2-ae8e7b6adcf2"},"source":["var1=int(input(\"ingresa el valor de la 1 variable: \"))\r\n","var2=int(input(\"ingresa el valor de la 1 variable: \"))\r\n","var3=int(input(\"ingresa el valor de la 1 variable: \"))\r\n","if (var1>var2 and var1>var3):\r\n","  print(\"el mayor es :\"+str(var1))\r\n","elif (var2>var1 and var2>var3):\r\n","  print(\"El mayor es: \"+str(var2))\r\n","elif (var3>var1 and var3>var2):\r\n","  print(\"El mayor es: \"+str(var3))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["ingresa el valor de la 1 variable: 9\n","ingresa el valor de la 1 variable: 0\n","ingresa el valor de la 1 variable: 15\n","El mayor es: 15\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"eYtzEzMs0BvZ"},"source":["Metodo python"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"h1bbCY5Y0FEz","executionInfo":{"status":"ok","timestamp":1612740483229,"user_tz":300,"elapsed":6989,"user":{"displayName":"Emmanuel Mosquera Casas","photoUrl":"","userId":"16600618469783398935"}},"outputId":"508933c7-10aa-463d-e766-10c74792a3bb"},"source":["var1, var2, var3= input (\"Ingrese los 3 numeros separados por coma:\").split(\",\")\r\n","print(\"El numero maximo es: \"+ str(max(var1,var2,var3)))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Ingrese los 3 numeros separados por coma:1,4,5\n","El numero maximo es: 5\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"YcgQPOhS11aP"},"source":["#Ejercicio 2"]},{"cell_type":"markdown","metadata":{"id":"UPisvtet2Ord"},"source":["Metodo clasico\r\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZJAwQJ6w2HWZ","executionInfo":{"status":"ok","timestamp":1613445510115,"user_tz":300,"elapsed":8264,"user":{"displayName":"Emmanuel Mosquera Casas","photoUrl":"","userId":"16600618469783398935"}},"outputId":"08f90bfb-18d4-4079-c494-f776a7726f39"},"source":["tot=int(input(\"ingresa la catindad N de numeros: \"))\r\n","suma=0\r\n","for i in range(0,tot):\r\n"," suma+=int(input(\"ingrese el valor del num \"+ str(i)+\": \"))\r\n","print(\"El total es : \"+str(suma))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["ingresa la catindad N de numeros: 3\n","ingrese el valor del num 0: 1\n","ingrese el valor del num 1: 2\n","ingrese el valor del num 2: 3\n","El total es : 6\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"MxmEEo3k2S0t"},"source":["Metodo python"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fwVdn17f2W0a","executionInfo":{"status":"ok","timestamp":1613445577931,"user_tz":300,"elapsed":10946,"user":{"displayName":"Emmanuel Mosquera Casas","photoUrl":"","userId":"16600618469783398935"}},"outputId":"28f4c623-64c9-45f3-9a95-6476c4f8579f"},"source":["suma=0\r\n","for i in range(0, int(input(\"Ingrese la cantidad N de numeros: \"))):\r\n","  suma+=int(input(\"ingrese el valor del numero\"+str(i)+\":\"))\r\n","print(\"El total es: \"+str(suma))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Ingrese la cantidad N de numeros: 3\n","ingrese el valor del numero0:1\n","ingrese el valor del numero1:2\n","ingrese el valor del numero2:3\n","El total es: 6\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"MFTol2jE2csT"},"source":["#Ejercicio 3"]},{"cell_type":"markdown","metadata":{"id":"twHE8NBM2iSC"},"source":["Metodo clasico.\r\n","\r\n","Programa el cual me saca el rango de los numeros pares"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wgpknulX2sGK","executionInfo":{"status":"ok","timestamp":1613445689860,"user_tz":300,"elapsed":7163,"user":{"displayName":"Emmanuel Mosquera Casas","photoUrl":"","userId":"16600618469783398935"}},"outputId":"44148c25-d8b1-4eaf-c4e8-99483e07d243"},"source":["inicio=int(input(\"numero minimo: \"))\r\n","fin=int(input(\"numero final: \"))\r\n","for i in range(inicio,fin):\r\n","  if((i%2)==0):\r\n","    print(\"El numero par: \"+str(i))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["numero minimo: 1\n","numero final: 5\n","El numero par: 2\n","El numero par: 4\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"yxf0r1SB3Atl"},"source":["Metodo python"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OxSSPN4N2-AS","executionInfo":{"status":"ok","timestamp":1613445759265,"user_tz":300,"elapsed":4502,"user":{"displayName":"Emmanuel Mosquera Casas","photoUrl":"","userId":"16600618469783398935"}},"outputId":"73547679-f417-42ce-9c3b-5d0cfc9529c8"},"source":["for i in range(int(input(\"numero minimo: \")),int(input(\"Numero final: \"))):\r\n","  if((i%2)==0): print(\"El numero par :\"+str(i))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Munero minimo: 1\n","Numero final: 5\n","El numero par :2\n","El numero par :4\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"6gE4Dq3e3LBz"},"source":["# Ejercicio 4"]},{"cell_type":"markdown","metadata":{"id":"iHqkT9XJ3OvK"},"source":["Programa que me visualiza dos listas concatenadas.\r\n","\r\n","\r\n","*Uno donde los numeros sean de 1 al 12\r\n","*Otro listado donde los numeros sean del 12 al 1"]},{"cell_type":"markdown","metadata":{"id":"_0kq2Jxj3Yrt"},"source":["metodo clasico"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HAZrNaAx3VKE","executionInfo":{"status":"ok","timestamp":1613445865383,"user_tz":300,"elapsed":766,"user":{"displayName":"Emmanuel Mosquera Casas","photoUrl":"","userId":"16600618469783398935"}},"outputId":"6b40e058-5168-45b0-a33b-b8b67e8ebf04"},"source":["rango1=list(range(1,13))\r\n","rango2=list(range(12,0,-1))\r\n","print(rango1 + rango2)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"8lqo9PAp3b8u"},"source":["metodo python\r\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1dER40n13e1K","executionInfo":{"status":"ok","timestamp":1613445861188,"user_tz":300,"elapsed":773,"user":{"displayName":"Emmanuel Mosquera Casas","photoUrl":"","userId":"16600618469783398935"}},"outputId":"60784c58-1fef-4b78-f9a0-af038fd9c5e3"},"source":["lista=list(range(1,13))\r\n","print(lista+lista[::-1])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"dt8X0u1b4lGU"},"source":["# Ejercicio 5"]},{"cell_type":"markdown","metadata":{"id":"RhOfDOTQ4w_x"},"source":["Diseñe un programa que muestre un listado de 10 números aleatorios entre 1 y 100"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Xm5ck_6D4rug","executionInfo":{"status":"ok","timestamp":1613446243636,"user_tz":300,"elapsed":706,"user":{"displayName":"Emmanuel Mosquera Casas","photoUrl":"","userId":"16600618469783398935"}},"outputId":"f875a858-7700-4567-a2a9-458f8d3cb664"},"source":["# Método Clásico\r\n","import random\r\n","\r\n","lista = [random.randrange(100) for i in range(10)]\r\n","print(lista)"],"execution_count":12,"outputs":[{"output_type":"stream","text":["[66, 58, 23, 2, 64, 76, 92, 9, 15, 2]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"u0lWSjku40J2","executionInfo":{"status":"ok","timestamp":1613446213721,"user_tz":300,"elapsed":723,"user":{"displayName":"Emmanuel Mosquera Casas","photoUrl":"","userId":"16600618469783398935"}},"outputId":"72c93830-3ba6-469f-c7b6-42b1e6e5e982"},"source":["# Método Python\r\n","import random\r\n","\r\n","for i in range(10): print(random.randrange(100))"],"execution_count":10,"outputs":[{"output_type":"stream","text":["39\n","98\n","95\n","85\n","68\n","72\n","26\n","53\n","86\n","79\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"nbzgmd2T55aV"},"source":["# Ejercicio 6"]},{"cell_type":"markdown","metadata":{"id":"EAOsuJ8O6DrS"},"source":["Diseñe un programa que genere un listado con las edades de N habitantes de una ciudad, donde la cantidad de habitantes sea un valor random entre 1000 y 50000, y la edad de cada persona también un random entre 1 y 100 años. Al final del programa, indicar cuanto es la población total y el porcentaje de cuántos son mayores de edad (>=18) y cuántos no."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NYMKxSu059D9","executionInfo":{"status":"ok","timestamp":1613446525274,"user_tz":300,"elapsed":724,"user":{"displayName":"Emmanuel Mosquera Casas","photoUrl":"","userId":"16600618469783398935"}},"outputId":"26ba21b9-c0d2-4d02-8400-c68ab9d41dbf"},"source":["#metodo \r\n","\r\n","from random import randint\r\n","\r\n","poblacion = [randint(1,100) for x in range(randint(10000,50000))]\r\n","menores = [edad for edad in poblacion if edad < 18]\r\n","print(\"Habitantes: \" + str(len(poblacion)) + \r\n","      \"\\n Menores de 18= \" + str(len(menores)) + \", con un porcentaje de: \" + str(len(menores)*100/len(poblacion)) + \"%\" + \r\n","      \"\\n Mayores de edad= \" + str(len(poblacion)-len(menores)) + \", con un porcentaje de: \" + str((len(poblacion)-len(menores))*100/len(poblacion)) + \"%\")\r\n","\r\n"],"execution_count":13,"outputs":[{"output_type":"stream","text":["Habitantes: 26181\n"," Menores de 18= 4458, con un porcentaje de: 17.02761544631603%\n"," Mayores de edad= 21723, con un porcentaje de: 82.97238455368397%\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"gQYdbxZm6q9j"},"source":["# Ejercicio 7"]},{"cell_type":"markdown","metadata":{"id":"D0APuzPW6v2S"},"source":["\r\n","El Objeto Array Numpy (Computación científica)\r\n","\r\n","Numpy es uno de los módulos más importantes de Pyhton. Añade toda la capacidad matemática y vectorial a Python, haciendo posible operar con cualquier dato númerico o array. Incorpora operaciones tan básicas como la suma, la multiplicación u otras mucho más complejas como la transformada de Fourier o el álgebla lineal. Tambien permite incorporar código fuente de otros lenguajes de programación como C/C++, o Fortran, lo que incrementa su compatibilidad e implementación.\r\n","\r\n","Ejemplo de Uso:\r\n"]},{"cell_type":"code","metadata":{"id":"Njmo0ZSu6u78"},"source":["import numpy as np\r\n","from random import randint\r\n"," \r\n","matriz = np.array([[i+1, randint(10000,70000)] for i in range(10)])\r\n","print(matriz)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"2UvxFOil66LN"},"source":["Diseñe un programa (máx 5 líneas) donde 6 candidatos se disputan la alcaldía. Los partidos políticos son:\r\n","\r\n","   * 1 Socio-democrático\r\n","   * 2 Ultra-derecha\r\n","   * 3 Primero los ricos\r\n","   * 4 Centro corrupto\r\n","   * 5 Cambio invertido\r\n","   * 6 Alianza pobre\r\n","Los votos de cada candidatos son generados de forma random entre 1 y 25000 votos máximo, el software debe determinar quien fue el ganador."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Vx_HY-i06714","executionInfo":{"status":"ok","timestamp":1613446819964,"user_tz":300,"elapsed":871,"user":{"displayName":"Emmanuel Mosquera Casas","photoUrl":"","userId":"16600618469783398935"}},"outputId":"c6cd9a49-e67f-4648-c96b-7129f9644734"},"source":["import numpy as np\r\n","from random import randint\r\n","matriz = np.array([[i+1, randint(1,25000)] for i in range(6)])\r\n","ganador = np.where(matriz[:,1] == matriz[:,1].max())\r\n","print(\"El ganador es: \" + str(matriz[ganador[0]]) + \"\\n\\n Las votaciones fueron: \\n\" + str(matriz))"],"execution_count":14,"outputs":[{"output_type":"stream","text":["El ganador es: [[    4 23160]]\n","\n"," Las votaciones fueron: \n","[[    1 20900]\n"," [    2 17544]\n"," [    3 19829]\n"," [    4 23160]\n"," [    5  8239]\n"," [    6  7266]]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"s83xHSK87Zee"},"source":["# Ejercicio 8"]},{"cell_type":"markdown","metadata":{"id":"yZ0q3aZ97c1b"},"source":["Diseñe un programa donde 6 candidatos se presentan a la disputa de la Gobernación, los candidatos son de los siguientes partidos:\r\n","\r\n","   * 1 Socio-democrático\r\n","   * 2 Ultra-derecha\r\n","   * 3 Primero los ricos\r\n","   * 4 Centro corrupto\r\n","   * 5 Cambio invertido\r\n","   * 6 Alianza pobre\r\n","\r\n","Los votos de los candidatos son generados de manera random entre 1 y 4500 votos máximo para cada uno de los 123 municipios del departamento, el software debe determinar quien fue el ganador.\r\n","\r\n","Consejo: Crear una matriz para los votos, compuesta de 123 filas y 6 columnas, cuyo valor sea random entre 1 y 4500"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pAAeHoaZ7lIa","executionInfo":{"status":"ok","timestamp":1613446943788,"user_tz":300,"elapsed":724,"user":{"displayName":"Emmanuel Mosquera Casas","photoUrl":"","userId":"16600618469783398935"}},"outputId":"458e279f-bf05-4a8d-ae5f-b37f9eef3862"},"source":["import numpy as np\r\n","from random import randint\r\n","votos = np.random.randint(4500, size=(123,6))\r\n","total_votos = np.array([[candidato+1, votos[:,candidato].sum()] for candidato in range(len(votos[0]))])\r\n","ganador = np.where(total_votos == total_votos[:,1].max())\r\n","print(\"El candidato ganador fue: \" + str(total_votos[ganador[0]]) + \"\\n\\n La votación fue la siguiente: \\n\" + str(total_votos))"],"execution_count":15,"outputs":[{"output_type":"stream","text":["El candidato ganador fue: [[     4 301401]]\n","\n"," La votación fue la siguiente: \n","[[     1 243351]\n"," [     2 285292]\n"," [     3 284578]\n"," [     4 301401]\n"," [     5 253804]\n"," [     6 284035]]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"qCl84bfL79Y5"},"source":["# Ejercicio 9"]},{"cell_type":"markdown","metadata":{"id":"jDBYrNiO8Be1"},"source":["Crear un programa para simular una carrera de F1, en dónde existen 5 vehículos:\r\n","\r\n","\r\n","   1 Renault\r\n","   2 Ferrari\r\n","   3 Mercedez\r\n","   4 Ford\r\n","   5 Red Bull\r\n","\r\n","\r\n","La carrera esta diseñada para 4 vueltas donde el tiempo mínimo es de 8.2 segundos y el máximo es de 10 segundos. Diseñe la matriz 4x5 donde el determine cual es el vehículo ganador, y los tiempos de cada vehículo por vuelta en random."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sd3NNbHT8AlC","executionInfo":{"status":"ok","timestamp":1613447106412,"user_tz":300,"elapsed":788,"user":{"displayName":"Emmanuel Mosquera Casas","photoUrl":"","userId":"16600618469783398935"}},"outputId":"2840796d-1da1-4fa9-a50c-eeea03ced0a5"},"source":["import numpy as np\r\n","from random import uniform\r\n","matriz = np.random.uniform(8.2, 10, size=(4,5))\r\n","total_vueltas = np.array([[corredor+1, matriz[:,corredor].sum()] for corredor in range(len(matriz[0]))])\r\n","ganador = np.where(matriz == matriz[:,1].min())\r\n","print(\"Ganador de la carrera: \" + str(total_vueltas[ganador[0]]) + \"\\n\\n Resultados de la carrera: \\n\" + str(matriz))"],"execution_count":19,"outputs":[{"output_type":"stream","text":["Ganador de la carrera: [[ 1.         35.26982113]]\n","\n"," Resultados de la carrera: \n","[[9.1155057  8.76753887 9.73124068 9.00604782 8.22370213]\n"," [9.08420634 9.78591749 9.19397436 8.7256037  8.7196002 ]\n"," [8.36391611 9.54259972 9.39262324 9.13851833 9.58314665]\n"," [8.70619297 9.82021327 9.18344515 8.84763422 9.05387136]]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"ZAA2iDLD8feB"},"source":["# Ejercicio 10"]},{"cell_type":"markdown","metadata":{"id":"cnheItIw8w5D"},"source":["\r\n","Matplotlib (Biblioteca de gráficos 2D en Python)\r\n","\r\n","Esta biblioteca puede generar gráficos como histogramas, espectros de potencia, de barras, de error, de dispersión, etc., con pocas lineas de código. Para un trazado simple, el módulo matplotlib.pyplot proporciona una interfaz gráfica similar a MATLAB, particularmente cuando se combina con IPython.\r\n","\r\n","Ejemplo de aplicación:\r\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":265},"id":"r7Bd9NeU8lE0","executionInfo":{"status":"ok","timestamp":1613447225935,"user_tz":300,"elapsed":773,"user":{"displayName":"Emmanuel Mosquera Casas","photoUrl":"","userId":"16600618469783398935"}},"outputId":"2731ec87-d119-49cf-91da-eedc7f028e67"},"source":["import matplotlib.pyplot as plt\r\n","plt.plot([10,20,40,20])\r\n","plt.ylabel(\"Gráfico Básico\")\r\n","plt.show()"],"execution_count":20,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":265},"id":"1AldUi-a80fi","executionInfo":{"status":"ok","timestamp":1613447260185,"user_tz":300,"elapsed":877,"user":{"displayName":"Emmanuel Mosquera Casas","photoUrl":"","userId":"16600618469783398935"}},"outputId":"07e2d233-9b06-4827-e8e0-a066ea2b442d"},"source":["import matplotlib.pyplot as plt\r\n","import random\r\n","lista = [random.randrange(10) for i in range(10)]\r\n","plt.plot(lista, 'ro')\r\n","plt.ylabel(\"Números random de 0 a 10\")\r\n","plt.show()"],"execution_count":21,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"bNcxHRj38yn8"},"source":["Ejercicio 10\r\n","\r\n","Visualice en gráficos de dispersión [pylot(scatter)] o de barras tomando los valores obtenidos en los ejercicios:\r\n","\r\n","    * Numpy, Ejercicio 1 (Alcaldes) -> Barras\r\n","    * Numpy, Ejercicio 3 (F1) -> Dispersión (colores por vehículo)\r\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":375},"id":"uSTEkYDC9AVV","executionInfo":{"status":"ok","timestamp":1613447344817,"user_tz":300,"elapsed":1034,"user":{"displayName":"Emmanuel Mosquera Casas","photoUrl":"","userId":"16600618469783398935"}},"outputId":"d475a1ce-f2d2-452c-ff05-78bb25977297"},"source":["### Numpy, Ejercicio 10(Alcaldes), Diagrama de Barras\r\n","\r\n","import numpy as np\r\n","from random import randint\r\n","import matplotlib.pyplot as plt\r\n","\r\n","# Votaciones\r\n","matriz = np.array([[i+1, randint(1,20000)] for i in range(6)])\r\n","ganador = np.where(matriz == matriz[:,1].max())\r\n","# Diagrama de Barras\r\n","fig = plt.figure('Gráfica de Barras') # Generación de Ventana\r\n","ax = fig.add_subplot(1,1,1) # Un eje coordenado\r\n","nombres = ['1. Socio-democrático', '2. Ultra-derecha', '3. Primero los ricos', '4. Centro corrupto', '5. Cambio invertido', '6. Alianza pobre']\r\n","\r\n","ax.bar(range(len(matriz)), matriz[:,1]) # Función bar para diagramar, con parametros de votos y puntos a ubicar\r\n","ax.set_xticks(range(len(matriz[:,1]))) # Número de puntos a ubicar\r\n","ax.set_xticklabels(nombres, rotation='vertical') # Agregar etiquetas a cada punto ubicado en el eje x\r\n","\r\n","plt.ylabel('Total votos')\r\n","plt.xlabel('Candidatos')\r\n","plt.show()\r\n","\r\n"],"execution_count":22,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":444},"id":"8L8OR0yN9PzH","executionInfo":{"status":"ok","timestamp":1613447367002,"user_tz":300,"elapsed":857,"user":{"displayName":"Emmanuel Mosquera Casas","photoUrl":"","userId":"16600618469783398935"}},"outputId":"5c636fd8-2c4b-4774-80f3-c613e306b191"},"source":["### Numpy, Ejercicio 3(F1), Diagrama de Dispersión\r\n","\r\n","import numpy as np\r\n","import matplotlib.pyplot as plt\r\n","\r\n","# Vehículos\r\n","matriz = np.random.uniform(8.2, 10, size=(4,5))\r\n","total_vueltas = np.array([[corredor+1, matriz[:,corredor].sum()] for corredor in range(len(matriz[0]))])\r\n","ganador = np.where(matriz == matriz[:,1].min())\r\n","print(\"El ganador fue : \" + str(total_vueltas[ganador[0]]) + \"\\n\\n  El tiempo total por corredor fue de: \\n\" + str(total_vueltas))\r\n","\r\n","# Diagrama de dispersión\r\n","x = total_vueltas[:,1]\r\n","y = total_vueltas[:,0]\r\n","fig = plt.figure()\r\n","fig.add_subplot(111) \r\n","plt.xlabel('Corredores')\r\n","plt.ylabel('Total Tiempo')\r\n","plt.scatter(y, x, c=x)\r\n","plt.show"],"execution_count":23,"outputs":[{"output_type":"stream","text":["El ganador fue : [[ 1.         35.51615536]]\n","\n","  El tiempo total por corredor fue de: \n","[[ 1.         35.51615536]\n"," [ 2.         35.79381658]\n"," [ 3.         36.82041672]\n"," [ 4.         36.98441235]\n"," [ 5.         36.21232654]]\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<function matplotlib.pyplot.show>"]},"metadata":{"tags":[]},"execution_count":23},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]}]}